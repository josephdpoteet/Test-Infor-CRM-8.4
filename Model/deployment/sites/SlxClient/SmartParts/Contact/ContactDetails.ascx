<%@ Control Language="C#" ClassName="ContactDetails" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.ScriptResourceProvider" TagPrefix="Saleslogix" %>

<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
<table border="0" cellpadding="1" cellspacing="0" class="formtable">
         <col width="33.33333%" />
            <col width="33.33333%" />
            <col width="33.33333%" />
     <tr>
            <td  >
 <div class=" lbl alignright">
   <asp:Label ID="nmeContactName_lbl" AssociatedControlID="nmeContactName" runat="server" Text="<%$ resources: nmeContactName.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"  >
    <SalesLogix:FullName runat="server" ID="nmeContactName" Required="true" ButtonToolTip="<%$ resources: nmeContactName.ButtonToolTip %>"  />
  </div>
      </td>
                <td  >
 <div class=" lbl alignright">
   <asp:Label ID="phnWorkPhone_lbl" AssociatedControlID="phnWorkPhone" runat="server" Text="<%$ resources: phnWorkPhone.Caption %>" ></asp:Label>
 </div>   
  <div  class="textcontrol phone"  > 
    <SalesLogix:Phone runat="server" ID="phnWorkPhone"
MaxLength="32"  />
  </div>
      </td>
                <td  >
<div class="slxlabel  alignleft  checkbox ">

  <SalesLogix:SLXCheckBox runat="server" ID="chkIsPrimary"  Text="<%$ resources: chkIsPrimary.Caption %>"  CssClass=""
LabelPlacement="right"  />
</div>
      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignright">
   <asp:Label ID="lueAccountName_lbl" AssociatedControlID="lueAccountName" runat="server" Text="<%$ resources: lueAccountName.Caption %>" ></asp:Label>
 </div>   
 <div   class="textcontrol lookup"   >
<SalesLogix:LookupControl runat="server" ID="lueAccountName" ReadOnly="true" EnableLookup="false" LookupEntityName="Account" LookupEntityTypeName="Sage.Entity.Interfaces.IAccount, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" EnableHyperLinking="true" AutoPostBack="true"  >
<LookupProperties>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

      </td>
                <td  >
 <div class=" lbl alignright">
   <asp:Label ID="phnFax_lbl" AssociatedControlID="phnFax" runat="server" Text="<%$ resources: phnFax.Caption %>" ></asp:Label>
 </div>   
  <div  class="textcontrol phone"  > 
    <SalesLogix:Phone runat="server" ID="phnFax"
MaxLength="32"  />
  </div>
      </td>
                <td  >
<div class="slxlabel  alignleft  checkbox ">

  <SalesLogix:SLXCheckBox runat="server" ID="chkIsServiceAuthorized"  Text="<%$ resources: chkIsServiceAuthorized.Caption %>"  CssClass=""
LabelPlacement="right"  />
</div>
      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignright">
   <asp:Label ID="pklTitle_lbl" AssociatedControlID="pklTitle" runat="server" Text="<%$ resources: pklTitle.Caption %>" ></asp:Label>
 </div>   
  <div  class="textcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="pklTitle" PickListName="Title" MustExistInList="false" AlphaSort="true"  />
  </div>
      </td>
                <td  >
 <div class=" lbl alignright">
   <asp:Label ID="phnMobilePhone_lbl" AssociatedControlID="phnMobilePhone" runat="server" Text="<%$ resources: phnMobilePhone.Caption %>" ></asp:Label>
 </div>   
  <div  class="textcontrol phone"  > 
    <SalesLogix:Phone runat="server" ID="phnMobilePhone"
MaxLength="32"  />
  </div>
      </td>
                <td  >
<div class=" lbl alignright" runat="server">
<asp:Label ID="txtInterest_lbl" AssociatedControlID="txtInterest" runat="server" Text="<%$ resources: txtInterest.Caption %>" ></asp:Label>
</div>
 <div class=" textcontrol" runat="server">
<asp:TextBox runat="server" ID="txtInterest"  dojoType="Sage.UI.Controls.TextBox"  />
</div>

      </td>
      </tr>
<tr>
            <td  >
<div class=" lbl alignright" runat="server">
<asp:Label ID="txtAssistant_lbl" AssociatedControlID="txtAssistant" runat="server" Text="<%$ resources: txtAssistant.Caption %>" ></asp:Label>
</div>
 <div class=" textcontrol" runat="server">
<asp:TextBox runat="server" ID="txtAssistant"  dojoType="Sage.UI.Controls.TextBox" MaxLength="64"  />
</div>

      </td>
                <td  >
 <div class=" lbl alignright">
   <asp:Label ID="phnHomePhone_lbl" AssociatedControlID="phnHomePhone" runat="server" Text="<%$ resources: phnHomePhone.Caption %>" ></asp:Label>
 </div>   
  <div  class="textcontrol phone"  > 
    <SalesLogix:Phone runat="server" ID="phnHomePhone"
MaxLength="32"  />
  </div>
      </td>
                <td  >
<div class="slxlabel  alignleft  checkbox ">

  <SalesLogix:SLXCheckBox runat="server" ID="chkDoNotSolicit"  Text="<%$ resources: chkDoNotSolicit.Caption %>"  CssClass=""
LabelPlacement="right" AutoPostBack="true"  />
</div>
      </td>
      </tr>
<tr>
            <td  >
<div class=" lbl alignright" runat="server">
<asp:Label ID="txtSalutation_lbl" AssociatedControlID="txtSalutation" runat="server" Text="<%$ resources: txtSalutation.Caption %>" ></asp:Label>
</div>
 <div class=" textcontrol" runat="server">
<asp:TextBox runat="server" ID="txtSalutation"  dojoType="Sage.UI.Controls.TextBox" MaxLength="64"  />
</div>

      </td>
                <td  >
 <div class=" lbl alignright">
   <asp:Label ID="phnOtherPhone_lbl" AssociatedControlID="phnOtherPhone" runat="server" Text="<%$ resources: phnOtherPhone.Caption %>" ></asp:Label>
 </div>   
  <div  class="textcontrol phone"  > 
    <SalesLogix:Phone runat="server" ID="phnOtherPhone"
 />
  </div>
      </td>
                <td  >
<div class="slxlabel  alignleft  checkbox ">

  <SalesLogix:SLXCheckBox runat="server" ID="chkDoNotEmail"  Text="<%$ resources: chkDoNotEmail.Caption %>"  CssClass=""
LabelPlacement="right" AutoPostBack="true"  />
</div>
      </td>
      </tr>
<tr>
            <td rowspan="3"  >
 <div class=" lbl alignright">
   <asp:Label ID="adrContactAddress_lbl" AssociatedControlID="adrContactAddress" runat="server" Text="<%$ resources: adrContactAddress.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol address"  >
    <SalesLogix:AddressControl runat="server" ID="adrContactAddress" AddressDescriptionPickListName="Address Description (Contact)" AddressDescriptionPickListId="kSYST0000013" ButtonToolTip="<%$ resources: adrContactAddress.ButtonToolTip %>" AddressToolTip="<%$ resources: adrContactAddress.AddressToolTip %>" >
<AddressDescStyle Height="80"></AddressDescStyle> </SalesLogix:AddressControl>
</div>

      </td>
                <td  >
 <div class=" lbl alignright">
   <asp:Label ID="cboPreferredContact_lbl" AssociatedControlID="cboPreferredContact" runat="server" Text="<%$ resources: cboPreferredContact.Caption %>" ></asp:Label>
 </div>   
  <div  class="textcontrol select"  > 
<asp:ListBox runat="server" ID="cboPreferredContact"  maxHeight="200"
 SelectionMode="Single" Rows="1" data-dojo-type="Sage.UI.Controls.Select" CssClass="select-control "  >
<asp:ListItem  Text="<%$ resources: cboPreferredContact_item0.Text %>"
Value="Unknown" />
<asp:ListItem  Text="<%$ resources: cboPreferredContact_item1.Text %>"
Value="E-mail" />
<asp:ListItem  Text="<%$ resources: cboPreferredContact_item2.Text %>"
Value="Phone" />
<asp:ListItem  Text="<%$ resources: cboPreferredContact_item3.Text %>"
Value="Fax" />
<asp:ListItem  Text="<%$ resources: cboPreferredContact_item4.Text %>"
Value="Letter" />
</asp:ListBox>
  </div>
      </td>
                <td  >
<div class="slxlabel  alignleft  checkbox ">

  <SalesLogix:SLXCheckBox runat="server" ID="chkDoNotPhone"  Text="<%$ resources: chkDoNotPhone.Caption %>"  CssClass=""
LabelPlacement="right"  />
</div>
      </td>
      </tr>
<tr>
                  <td  >
 <div class=" lbl alignright">
   <asp:Label ID="emlEmailAddress_lbl" AssociatedControlID="emlEmailAddress" runat="server" Text="<%$ resources: emlEmailAddress.Caption %>" ></asp:Label>
 </div>   
  <div  class="textcontrol"  > 
<SalesLogix:Email runat="server" ID="emlEmailAddress" ButtonToolTip="<%$ resources: emlEmailAddress.ButtonToolTip %>" MaxLength="128" EmailTextBoxStyle-ForeColor="#13a3f7" EmailTextBoxStyle-Font-Underline="false" />
  </div>
      </td>
                <td  >
<div class="slxlabel  alignleft  checkbox ">

  <SalesLogix:SLXCheckBox runat="server" ID="chkDoNotMail"  Text="<%$ resources: chkDoNotMail.Caption %>"  CssClass=""
LabelPlacement="right"  />
</div>
      </td>
      </tr>
<tr>
                  <td  >
 <div class=" lbl alignright">
   <asp:Label ID="urlWebAddress_lbl" AssociatedControlID="urlWebAddress" runat="server" Text="<%$ resources: urlWebAddress.Caption %>" ></asp:Label>
 </div>   
  <div  class="textcontrol"  > 
    <SalesLogix:URL runat="server" ID="urlWebAddress" ButtonToolTip="<%$ resources: urlWebAddress.ButtonToolTip %>" URLTextBoxStyle-ForeColor="#000099" URLTextBoxStyle-Font-Underline="false" />
  </div>
      </td>
                <td  >
<div class="slxlabel  alignleft  checkbox ">

  <SalesLogix:SLXCheckBox runat="server" ID="chkDoNotFax"  Text="<%$ resources: chkDoNotFax.Caption %>"  CssClass=""
LabelPlacement="right"  />
</div>
      </td>
      </tr>
<tr>
            <td  colspan="3" >
  <hr />
 

      </td>
                  </tr>
<tr>
            <td  >
 <div class=" lbl alignright">
   <asp:Label ID="ownContactOwner_lbl" AssociatedControlID="ownContactOwner" runat="server" Text="<%$ resources: ownContactOwner.Caption %>" ></asp:Label>
 </div>   
  <div  class="textcontrol"  > 
<SalesLogix:OwnerControl runat="server" ID="ownContactOwner" ReadOnly="true" ButtonToolTip="<%$ resources: ownContactOwner.ButtonToolTip %>" Types="$qfcontrol.Types"  />
  </div>
      </td>
                <td  >
 <div class=" lbl alignright">
   <asp:Label ID="pklContactType_lbl" AssociatedControlID="pklContactType" runat="server" Text="<%$ resources: pklContactType.Caption %>" ></asp:Label>
 </div>   
  <div  class="textcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="pklContactType" PickListName="Contact Type" MustExistInList="false" AlphaSort="true"  />
  </div>
      </td>
                <td  >
 <div class=" lbl alignright">
   <asp:Label ID="pklContactStatus_lbl" AssociatedControlID="pklContactStatus" runat="server" Text="<%$ resources: pklContactStatus.Caption %>" ></asp:Label>
 </div>   
  <div  class="textcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="pklContactStatus" PickListName="Contact Status" MustExistInList="false" AlphaSort="true"  />
  </div>
      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignright">
   <asp:Label ID="usrAcctMgr_lbl" AssociatedControlID="usrAcctMgr" runat="server" Text="<%$ resources: usrAcctMgr.Caption %>" ></asp:Label>
 </div>   
  <div  class="textcontrol"  > 
    <SalesLogix:SlxUserControl runat="server" ID="usrAcctMgr" ButtonToolTip="<%$ resources: usrAcctMgr.ButtonToolTip %>"  />
  </div>
      </td>
                <td></td>
                <td  >
<div class=" lbl alignright" runat="server">
<asp:Label ID="txtPropensityScore_lbl" AssociatedControlID="txtPropensityScore" runat="server" Text="<%$ resources: txtPropensityScore.Caption %>" ></asp:Label>
</div>
 <div class=" textcontrol" runat="server">
<asp:TextBox runat="server" ID="txtPropensityScore" ReadOnly="true" ToolTip="<%$ resources: txtPropensityScore.ToolTip %>"  dojoType="Sage.UI.Controls.TextBox"  />
</div>

      </td>
      </tr>
</table>
 


 <SalesLogix:SmartPartToolsContainer runat="server" ID="ContactDetails_RTools" ToolbarLocation="right">
   <SalesLogix:GroupNavigator runat="server" ID="cmdDetailsNavigator" ></SalesLogix:GroupNavigator>
    <asp:ImageButton runat="server" ID="cmdSaveContactDetails"
 AlternateText="<%$ resources: cmdSaveContactDetails.Caption %>"  ToolTip="<%$ resources: cmdSaveContactDetails.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Save_16x16"  />
   
    <asp:ImageButton runat="server" ID="cmdReset"
 AlternateText="<%$ resources: cmdReset.Caption %>"  ToolTip="<%$ resources: cmdReset.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Reset_16x16"  />
 
    <asp:ImageButton runat="server" ID="cmdDelete"
 AlternateText="<%$ resources: cmdDelete.Caption %>"  ToolTip="<%$ resources: cmdDelete.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Delete_16x16" 
 />
 
   <SalesLogix:Copy ID="cmdCopyToClipboard" runat="server" CopyToDestination="Clipboard"
 ContentConfig="~/SummaryConfigData/CopyContact.xml"
 ToolTip="<%$ resources: cmdCopyToClipboard.ToolTip %>"  ButtonImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=CopyToClipboard_16x16"  DisplayMode="AsControl" 
>
</SalesLogix:Copy>

    <asp:ImageButton runat="server" ID="cmdMoveContact"
 AlternateText="<%$ resources: cmdMoveContact.Caption %>"  ToolTip="<%$ resources: cmdMoveContact.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Move_Contact_16x16"  OnClientClick="return cmdMoveContact_ClientClick(); " 
   />
 
    <asp:ImageButton runat="server" ID="cmdCopyContact"
 ToolTip="<%$ resources: cmdCopyContact.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=CopyContact_16x16"  OnClientClick="return cmdCopyContact_ClientClick(); " 
   />
 
  <SalesLogix:PageLink ID="btnEditForm" CssClass="adminEditFormButton" runat="server" LinkType="RelativePath" ToolTip="<%$ resources: Portal, EditForm_ToolTip %>" NavigateUrl="~/FormManager.aspx?entityid=ContactDetails&modeid=Detail" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=form_manager_16x16"></SalesLogix:PageLink>
 
 
 
 
 <SalesLogix:PageLink ID="lnkContactDetailsHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="ContactDetails" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink>
 </SalesLogix:SmartPartToolsContainer>

<SalesLogix:ScriptResourceProvider ID="ContactDetailsResources" runat="server">
<Keys>
			<SalesLogix:ResourceKeyName Key="btnMoveContactError" />
			<SalesLogix:ResourceKeyName Key="btnCopyContactError" />
	</Keys>
</SalesLogix:ScriptResourceProvider>

<script runat="server" type="text/C#">
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService { get; set; }

public override Type EntityType
{
    get { return typeof(Sage.Entity.Interfaces.IContact); }
}
 

protected override void OnAddEntityBindings() {
         var nmeContactNameNameFirstBinding = new WebEntityBinding("FirstName", nmeContactName, "NameFirst", false);
BindingSource.Bindings.Add(nmeContactNameNameFirstBinding);
           var nmeContactNameNameLastBinding = new WebEntityBinding("LastName", nmeContactName, "NameLast",true );
BindingSource.Bindings.Add(nmeContactNameNameLastBinding);
           var nmeContactNameNameMiddleBinding = new WebEntityBinding("MiddleName", nmeContactName, "NameMiddle",true );
BindingSource.Bindings.Add(nmeContactNameNameMiddleBinding);
           var nmeContactNameNamePrefixBinding = new WebEntityBinding("Prefix", nmeContactName, "NamePrefix",true );
BindingSource.Bindings.Add(nmeContactNameNamePrefixBinding);
           var nmeContactNameNamePrefixLanguageBinding = new WebEntityBinding("LocationCode", nmeContactName, "NamePrefixLanguage",true );
BindingSource.Bindings.Add(nmeContactNameNamePrefixLanguageBinding);
           var nmeContactNameNamePrefixLanguageFiltersBinding = new ExpressionBinding("True", nmeContactName, "NamePrefixLanguageFilters")
   { CompileExpression = false, NegateBooleanValue = false, NullValue = "" };
BindingSource.Bindings.Add(nmeContactNameNamePrefixLanguageFiltersBinding);
           var nmeContactNameNameSuffixBinding = new WebEntityBinding("Suffix", nmeContactName, "NameSuffix",true );
BindingSource.Bindings.Add(nmeContactNameNameSuffixBinding);
           var nmeContactNameNameSuffixLanguageBinding = new WebEntityBinding("LocationCode", nmeContactName, "NameSuffixLanguage",true );
BindingSource.Bindings.Add(nmeContactNameNameSuffixLanguageBinding);
           var nmeContactNameNameSuffixLanguageFiltersBinding = new ExpressionBinding("True", nmeContactName, "NameSuffixLanguageFilters")
   { CompileExpression = false, NegateBooleanValue = false, NullValue = "" };
BindingSource.Bindings.Add(nmeContactNameNameSuffixLanguageFiltersBinding);
              var phnWorkPhoneTextBinding = new WebEntityBinding("WorkPhone", phnWorkPhone, "Text", false);
BindingSource.Bindings.Add(phnWorkPhoneTextBinding);
              var chkIsPrimaryCheckedBinding = new WebEntityBinding("IsPrimary", chkIsPrimary, "Checked", false);
BindingSource.Bindings.Add(chkIsPrimaryCheckedBinding);
              var lueAccountNameLookupResultValueBinding = new WebEntityBinding("Account", lueAccountName, "LookupResultValue", false);
BindingSource.Bindings.Add(lueAccountNameLookupResultValueBinding);
              var phnFaxTextBinding = new WebEntityBinding("Fax", phnFax, "Text", false);
BindingSource.Bindings.Add(phnFaxTextBinding);
              var chkIsServiceAuthorizedCheckedBinding = new WebEntityBinding("IsServiceAuthorized", chkIsServiceAuthorized, "Checked", false);
BindingSource.Bindings.Add(chkIsServiceAuthorizedCheckedBinding);
              var pklTitlePickListValueBinding = new WebEntityBinding("Title", pklTitle, "PickListValue", false);
BindingSource.Bindings.Add(pklTitlePickListValueBinding);
              var phnMobilePhoneTextBinding = new WebEntityBinding("Mobile", phnMobilePhone, "Text", false);
BindingSource.Bindings.Add(phnMobilePhoneTextBinding);
              var txtInterestTextBinding = new WebEntityBinding("Interests", txtInterest, "Text", false);
BindingSource.Bindings.Add(txtInterestTextBinding);
              var txtAssistantTextBinding = new WebEntityBinding("Assistant", txtAssistant, "Text", false);
BindingSource.Bindings.Add(txtAssistantTextBinding);
              var phnHomePhoneTextBinding = new WebEntityBinding("HomePhone", phnHomePhone, "Text", false);
BindingSource.Bindings.Add(phnHomePhoneTextBinding);
              var chkDoNotSolicitCheckedBinding = new WebEntityBinding("DoNotSolicit", chkDoNotSolicit, "Checked", false);
BindingSource.Bindings.Add(chkDoNotSolicitCheckedBinding);
              var txtSalutationTextBinding = new WebEntityBinding("Salutation", txtSalutation, "Text", false);
BindingSource.Bindings.Add(txtSalutationTextBinding);
              var phnOtherPhoneTextBinding = new WebEntityBinding("OtherPhone", phnOtherPhone, "Text", false);
BindingSource.Bindings.Add(phnOtherPhoneTextBinding);
              var chkDoNotEmailCheckedBinding = new WebEntityBinding("DoNotEmail", chkDoNotEmail, "Checked", false);
BindingSource.Bindings.Add(chkDoNotEmailCheckedBinding);
           var chkDoNotEmailEnabledBinding = new WebEntityBinding("!DoNotSolicit", chkDoNotEmail, "Enabled",true );
BindingSource.Bindings.Add(chkDoNotEmailEnabledBinding);
              var adrContactAddressAddressCityBinding = new WebEntityBinding("Address.City", adrContactAddress, "AddressCity",true );
BindingSource.Bindings.Add(adrContactAddressAddressCityBinding);
           var adrContactAddressAddressCountryBinding = new WebEntityBinding("Address.Country", adrContactAddress, "AddressCountry",true );
BindingSource.Bindings.Add(adrContactAddressAddressCountryBinding);
           var adrContactAddressAddressCountryCodeBinding = new WebEntityBinding("Address.CountryCode", adrContactAddress, "AddressCountryCode",true );
BindingSource.Bindings.Add(adrContactAddressAddressCountryCodeBinding);
           var adrContactAddressAddressCountyBinding = new WebEntityBinding("Address.County", adrContactAddress, "AddressCounty",true );
BindingSource.Bindings.Add(adrContactAddressAddressCountyBinding);
           var adrContactAddressAddressDesc1Binding = new WebEntityBinding("Address.Address1", adrContactAddress, "AddressDesc1", false);
BindingSource.Bindings.Add(adrContactAddressAddressDesc1Binding);
           var adrContactAddressAddressDesc2Binding = new WebEntityBinding("Address.Address2", adrContactAddress, "AddressDesc2",true );
BindingSource.Bindings.Add(adrContactAddressAddressDesc2Binding);
           var adrContactAddressAddressDesc3Binding = new WebEntityBinding("Address.Address3", adrContactAddress, "AddressDesc3",true );
BindingSource.Bindings.Add(adrContactAddressAddressDesc3Binding);
           var adrContactAddressAddressDesc4Binding = new WebEntityBinding("Address.Address4", adrContactAddress, "AddressDesc4",true );
BindingSource.Bindings.Add(adrContactAddressAddressDesc4Binding);
           var adrContactAddressAddressDesc5Binding = new WebEntityBinding("Address.Address5", adrContactAddress, "AddressDesc5",true );
BindingSource.Bindings.Add(adrContactAddressAddressDesc5Binding);
           var adrContactAddressAddressDesc6Binding = new WebEntityBinding("Address.Address6", adrContactAddress, "AddressDesc6",true );
BindingSource.Bindings.Add(adrContactAddressAddressDesc6Binding);
           var adrContactAddressAddressDescriptionBinding = new WebEntityBinding("Address.Description", adrContactAddress, "AddressDescription",true );
BindingSource.Bindings.Add(adrContactAddressAddressDescriptionBinding);
           var adrContactAddressAddressDisplayBinding = new WebEntityBinding("Address.FullAddress", adrContactAddress, "AddressDisplay",true );
BindingSource.Bindings.Add(adrContactAddressAddressDisplayBinding);
           var adrContactAddressAddressIsMailingBinding = new WebEntityBinding("Address.IsMailing", adrContactAddress, "AddressIsMailing",true );
BindingSource.Bindings.Add(adrContactAddressAddressIsMailingBinding);
           var adrContactAddressAddressIsPrimaryBinding = new WebEntityBinding("Address.IsPrimary", adrContactAddress, "AddressIsPrimary",true );
BindingSource.Bindings.Add(adrContactAddressAddressIsPrimaryBinding);
           var adrContactAddressAddressPostalCodeBinding = new WebEntityBinding("Address.PostalCode", adrContactAddress, "AddressPostalCode",true );
BindingSource.Bindings.Add(adrContactAddressAddressPostalCodeBinding);
           var adrContactAddressAddressSalutationBinding = new WebEntityBinding("Address.Salutation", adrContactAddress, "AddressSalutation",true );
BindingSource.Bindings.Add(adrContactAddressAddressSalutationBinding);
           var adrContactAddressAddressStateBinding = new WebEntityBinding("Address.State", adrContactAddress, "AddressState",true );
BindingSource.Bindings.Add(adrContactAddressAddressStateBinding);
           var adrContactAddressAddressTypeBinding = new WebEntityBinding("Address.AddressType", adrContactAddress, "AddressType",true );
BindingSource.Bindings.Add(adrContactAddressAddressTypeBinding);
           var adrContactAddressPrimaryAddressBinding = new WebEntityBinding("Address.PrimaryAddress", adrContactAddress, "PrimaryAddress",true );
BindingSource.Bindings.Add(adrContactAddressPrimaryAddressBinding);
              var cboPreferredContactSelectedValueBinding = new WebEntityBinding("PreferredContact", cboPreferredContact, "SelectedValue",true );
cboPreferredContactSelectedValueBinding.ChangeNotificationEventName = "TextChanged";
BindingSource.Bindings.Add(cboPreferredContactSelectedValueBinding);
              var chkDoNotPhoneCheckedBinding = new WebEntityBinding("DoNotPhone", chkDoNotPhone, "Checked", false);
BindingSource.Bindings.Add(chkDoNotPhoneCheckedBinding);
           var chkDoNotPhoneEnabledBinding = new WebEntityBinding("!DoNotSolicit", chkDoNotPhone, "Enabled",true );
BindingSource.Bindings.Add(chkDoNotPhoneEnabledBinding);
              var emlEmailAddressTextBinding = new WebEntityBinding("Email", emlEmailAddress, "Text", false);
BindingSource.Bindings.Add(emlEmailAddressTextBinding);
              var chkDoNotMailCheckedBinding = new WebEntityBinding("DoNotMail", chkDoNotMail, "Checked", false);
BindingSource.Bindings.Add(chkDoNotMailCheckedBinding);
           var chkDoNotMailEnabledBinding = new WebEntityBinding("!DoNotSolicit", chkDoNotMail, "Enabled",true );
BindingSource.Bindings.Add(chkDoNotMailEnabledBinding);
              var urlWebAddressTextBinding = new WebEntityBinding("WebAddress", urlWebAddress, "Text", false);
BindingSource.Bindings.Add(urlWebAddressTextBinding);
              var chkDoNotFaxCheckedBinding = new WebEntityBinding("DoNotFax", chkDoNotFax, "Checked", false);
BindingSource.Bindings.Add(chkDoNotFaxCheckedBinding);
           var chkDoNotFaxEnabledBinding = new WebEntityBinding("!DoNotSolicit", chkDoNotFax, "Enabled",true );
BindingSource.Bindings.Add(chkDoNotFaxEnabledBinding);
                 var ownContactOwnerLookupResultValueBinding = new WebEntityBinding("Owner", ownContactOwner, "LookupResultValue", "", null, false);
BindingSource.Bindings.Add(ownContactOwnerLookupResultValueBinding);
              var pklContactTypePickListValueBinding = new WebEntityBinding("Type", pklContactType, "PickListValue", false);
BindingSource.Bindings.Add(pklContactTypePickListValueBinding);
              var pklContactStatusPickListValueBinding = new WebEntityBinding("Status", pklContactStatus, "PickListValue", false);
BindingSource.Bindings.Add(pklContactStatusPickListValueBinding);
              var usrAcctMgrLookupResultValueBinding = new WebEntityBinding("AccountManager", usrAcctMgr, "LookupResultValue", "", null, false);
BindingSource.Bindings.Add(usrAcctMgrLookupResultValueBinding);
              var txtPropensityScoreTextBinding = new WebEntityBinding("SICustomers.Score", txtPropensityScore, "Text", false);
BindingSource.Bindings.Add(txtPropensityScoreTextBinding);
                      
      
      
      
                 
      
      
      
                 
      
      
      
             
      
      
      
    }
                                                                                                                                                                                                    
protected void chkDoNotSolicit_ChangeAction(object sender, EventArgs e) {
  var args = e as Sage.Platform.WebPortal.SmartParts.WebActionEventArgs;
  if (args != null && !string.IsNullOrEmpty(args.PassThroughObject.ToString()) && DialogService != null) {
    DialogService.ShowMessage(args.PassThroughObject.ToString());
  } 

}
protected void chkDoNotEmail_ChangeAction(object sender, EventArgs e) {
  var args = e as Sage.Platform.WebPortal.SmartParts.WebActionEventArgs;
  if (args != null && !string.IsNullOrEmpty(args.PassThroughObject.ToString()) && DialogService != null) {
    DialogService.ShowMessage(args.PassThroughObject.ToString());
  } 

}
protected void cmdSaveContactDetails_ClickAction(object sender, EventArgs e) {
Sage.Entity.Interfaces.IContact entity = (Sage.Entity.Interfaces.IContact) this.BindingSource.Current;
if (entity.HasPropagationChanges()) {
            cmdSaveContactDetails_ClickActionS(sender, e);
      
      }
else {
            cmdSaveContactDetails_ClickActionF(sender, e);
      
      }
}
protected void cmdSaveContactDetails_ClickActionS(object sender, EventArgs e) {
if (DialogService != null) {
  // DialogActionItem
  DialogService.SetSpecs(400, 400, "UpdateContactOptions", string.Empty );
    DialogService.EntityType = typeof(Sage.Entity.Interfaces.IContact); 
    DialogService.ShowDialog();
}

}
protected void cmdSaveContactDetails_ClickActionF(object sender, EventArgs e) {
  Sage.Entity.Interfaces.IContact _entity = BindingSource.Current as Sage.Entity.Interfaces.IContact;
  if (_entity != null)
  {
    object _parent = GetParentEntity();
    if (DialogService.ChildInsertInfo != null)
    {
        if (_parent != null)
        {
            if (DialogService.ChildInsertInfo.ParentReferenceProperty != null)
            {
                var parentEntityName = _parent.GetType().Name;
                var childEntityName = _entity.GetType().Name;
                var parentType = Saleslogix.Integration.BOE.Common.EntityHelper.GetType(parentEntityName).FullName;
                var childType = Saleslogix.Integration.BOE.Common.EntityHelper.GetType(childEntityName).FullName;
                if (DialogService.ChildInsertInfo.ParentEntityType.FullName.Equals(parentType) &&
                         DialogService.ChildInsertInfo.ChildEntityType.FullName.Equals(childType)) {
                            DialogService.ChildInsertInfo.ParentReferenceProperty.SetValue(_entity, _parent, null);
                        }
			}
        }
    }
    bool shouldSave = true;
    var page = Page as Sage.Platform.WebPortal.EntityPage;
    if (page != null)
    {
        if(IsInDialog() && page.ModeId.ToUpper() == "INSERT")
        {
            shouldSave = false;
        }
    }

    if(shouldSave)
    {
       _entity.Save();
    }

    if (_parent != null)
    {
        if (DialogService.ChildInsertInfo != null)
        {
           if (DialogService.ChildInsertInfo.ParentsCollectionProperty != null)
           {
              var addMethod = DialogService.ChildInsertInfo.ParentsCollectionProperty.PropertyType.GetMethod("Add");
              var parentEntityName = _parent.GetType().Name;
              var childEntityName = _entity.GetType().Name;
              var parentType = Saleslogix.Integration.BOE.Common.EntityHelper.GetType(parentEntityName).FullName;
              var childType = Saleslogix.Integration.BOE.Common.EntityHelper.GetType(childEntityName).FullName;
              if (DialogService.ChildInsertInfo.ParentEntityType.FullName.Equals(parentType) &&
                         DialogService.ChildInsertInfo.ChildEntityType.FullName.Equals(childType)) {
                           addMethod.Invoke(DialogService.ChildInsertInfo.ParentsCollectionProperty.GetValue(_parent, null), new object[] { _entity });
                          }
           }
        }
     }
  }

          cmdSaveContactDetails_ClickActionFBRC(sender, e);
    
  
}
protected void cmdSaveContactDetails_ClickActionFBRC(object sender, EventArgs e) {
Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
if (refresher != null) {
  refresher.RefreshAll();
}
else {  
  Response.Redirect(Request.Url.ToString());
}
}
protected void cmdReset_ClickAction(object sender, EventArgs e) {
  
}
protected void cmdDelete_ClickAction(object sender, EventArgs e) {
  var persistentEntity = this.BindingSource.Current as Sage.Platform.Orm.Interfaces.IPersistentEntity;
  if (persistentEntity != null) {
     persistentEntity.Delete();

     IGroupContextService svc = Sage.Platform.Application.ApplicationContext.Current.Services.Get<IGroupContextService>() as GroupContextService;
     if (svc != null) {
        GroupContext context = svc.GetGroupContext();
        if(context != null && context.CurrentGroupInfo != null) {
	   context.CurrentGroupInfo.ClearCache();
        }
     }
  }

          cmdDelete_ClickActionBRC(sender, e);
    
  
}
protected void cmdDelete_ClickActionBRC(object sender, EventArgs e) {
      Response.Redirect("Contact.aspx");
  
}
protected void cmdMoveContact_ClickAction(object sender, EventArgs e) {
if (DialogService != null) {
  // DialogActionItem
  DialogService.SetSpecs(645, 600, "MoveContact", GetLocalResourceObject("ee3027fb-0e00-4c1d-8e7f-c6b48787afb4.DialogTitleOverride").ToString() );
    DialogService.EntityType = typeof(Sage.Entity.Interfaces.IContact); 
    DialogService.ShowDialog();
}

}
protected void cmdCopyContact_ClickAction(object sender, EventArgs e) {
if (DialogService != null) {
  // DialogActionItem
  DialogService.SetSpecs(415, 470, "CopyNewContact", GetLocalResourceObject("a358db35-34b4-4de7-9a36-0eaec33da264.DialogTitleOverride").ToString() );
    DialogService.EntityType = typeof(Sage.Entity.Interfaces.IContact); 
    DialogService.ShowDialog();
}

}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 chkDoNotSolicit.CheckedChanged += chkDoNotSolicit_ChangeAction;
chkDoNotEmail.CheckedChanged += chkDoNotEmail_ChangeAction;
if (RoleSecurityService != null)
{
if (RoleSecurityService.HasAccess("ENTITIES/CONTACT/EDIT"))
{
cmdSaveContactDetails.Click += cmdSaveContactDetails_ClickAction;
}
}
cmdReset.Click += cmdReset_ClickAction;
if (RoleSecurityService != null)
{
if (RoleSecurityService.HasAccess("ENTITIES/CONTACT/DELETE"))
{
cmdDelete.Click += cmdDelete_ClickAction;
}
}
if (RoleSecurityService != null)
{
if (RoleSecurityService.HasAccess("ENTITIES/CONTACT/MOVE"))
{
cmdMoveContact.Click += cmdMoveContact_ClickAction;
}
}
if (RoleSecurityService != null)
{
if (RoleSecurityService.HasAccess("ENTITIES/CONTACT/COPY"))
{
cmdCopyContact.Click += cmdCopyContact_ClickAction;
}
}


}

protected void quickformload0(object sender, EventArgs e) {
var contact = (IContact) BindingSource.Current;
var mappingService = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.SData.IAppIdMappingService>(true);
bool isIntegrationEnabled = mappingService.IsIntegrationEnabled();
if (isIntegrationEnabled)
{
    var fls = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Security.IFieldLevelSecurityService>(true);
    if (fls != null)
    {
        var access = fls.GetAccessForProperty(contact, "Address1");
        adrContactAddress.ReadOnly = (access == Sage.Platform.Security.FieldAccess.ReadOnly);
        access = fls.GetAccessForProperty(contact, "FirstName");
        if (access == Sage.Platform.Security.FieldAccess.ReadOnly)
        {
            nmeContactName.ReadOnly = true;
        }
    }
}

bool isSalesIntelligenceEnabled = mappingService.IsSalesIntelligenceEnabled();
using (var session = new Sage.Platform.Orm.SessionScopeWrapper())
{
    var dataValue = session.QueryOver<Sage.Entity.Interfaces.ICustomSetting>()
            .Where(i => i.Category == "Sales Intelligence" && i.Description == "Contact")
            .Select(i => i.DataValue)
            .SingleOrDefault<string>();
    bool siEnabledForEntity = false; 
    if (!String.IsNullOrEmpty(dataValue))
    {
		siEnabledForEntity = dataValue == "True";
    }

    if (!siEnabledForEntity || !isSalesIntelligenceEnabled)
    {
        txtPropensityScore.Visible = false;
        txtPropensityScore_lbl.Visible = false;
    }
}

}
private bool _runActivating;
protected override void OnActivating()
{
_runActivating = true;
}
private void DoActivating()
{
quickformload0(this, EventArgs.Empty);

}
protected override void OnFormBound()
{
Sage.Platform.WebPortal.EntityPage epage = Page as Sage.Platform.WebPortal.EntityPage;
        if (epage != null)
            _runActivating = (epage.IsNewEntity || _runActivating);
if (_runActivating) DoActivating();
ClientBindingMgr.RegisterSaveButton(cmdSaveContactDetails);

cmdDelete.OnClientClick = string.Format("return confirm('{0}');", Sage.Platform.WebPortal.PortalUtil.JavaScriptEncode(GetLocalResourceObject("cmdDelete.ActionConfirmationMessage").ToString()));

if (RoleSecurityService != null && !RoleSecurityService.HasAccess("Administration/Forms/View"))
{
btnEditForm.Visible = false;
}
if (RoleSecurityService != null && !RoleSecurityService.HasAccess("ENTITIES/CONTACT/EDIT"))
{
cmdSaveContactDetails.Visible = false;
}
if (RoleSecurityService != null && !RoleSecurityService.HasAccess("ENTITIES/CONTACT/DELETE"))
{
cmdDelete.Visible = false;
}
if (RoleSecurityService != null && !RoleSecurityService.HasAccess("ENTITIES/CONTACT/MOVE"))
{
cmdMoveContact.Visible = false;
}
if (RoleSecurityService != null && !RoleSecurityService.HasAccess("ENTITIES/CONTACT/COPY"))
{
cmdCopyContact.Visible = false;
}
if (ClientBindingMgr != null) { ClientBindingMgr.RegisterResetButton(cmdReset); }


}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
    var tinfo = new ToolsSmartPartInfo();
    
    foreach (Control c in Controls)
    {
        var cont = c as SmartPartToolsContainer;
        if (cont != null)
        {
            switch (cont.ToolbarLocation)
            {
                case SmartPartToolsLocation.Right:
                    foreach (Control tool in cont.Controls)
                    {
                                            tinfo.RightTools.Add(tool);
                                        }
                    break;
                case SmartPartToolsLocation.Center:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.CenterTools.Add(tool);
                    }
                    break;
                case SmartPartToolsLocation.Left:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.LeftTools.Add(tool);
                    }
                    break;
            }
        }
    }

        return tinfo;
}

private ContactDetailsAdapter _formAdapter;

// For backward compat
public ContactDetailsAdapter FormAdapter
{
    get { return _formAdapter ?? (_formAdapter = new ContactDetailsAdapter(this)); }
}
// For easier programming model
public ContactDetailsAdapter MyPage {get { return FormAdapter; }}

public class ContactDetailsAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.IContactDetails
{
    public ContactDetailsAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
        : base(smartPart) {}

    private Sage.Platform.Controls.IPersonNameControl _nmeContactName;
    public  Sage.Platform.Controls.IPersonNameControl nmeContactName
    {
        get { return FindControl(ref _nmeContactName, "nmeContactName"); }
    }
    private Sage.Platform.Controls.ILookupControl _lueAccountName;
    public  Sage.Platform.Controls.ILookupControl lueAccountName
    {
        get { return FindControl(ref _lueAccountName, "lueAccountName"); }
    }
    private Sage.Platform.Controls.IPickListControl _pklTitle;
    public  Sage.Platform.Controls.IPickListControl pklTitle
    {
        get { return FindControl(ref _pklTitle, "pklTitle"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtAssistant;
    public  Sage.Platform.Controls.ITextBoxControl txtAssistant
    {
        get { return FindControl(ref _txtAssistant, "txtAssistant"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtSalutation;
    public  Sage.Platform.Controls.ITextBoxControl txtSalutation
    {
        get { return FindControl(ref _txtSalutation, "txtSalutation"); }
    }
    private Sage.Platform.Controls.IAddressControl _adrContactAddress;
    public  Sage.Platform.Controls.IAddressControl adrContactAddress
    {
        get { return FindControl(ref _adrContactAddress, "adrContactAddress"); }
    }
    private Sage.Platform.Controls.IOwnerControl _ownContactOwner;
    public  Sage.Platform.Controls.IOwnerControl ownContactOwner
    {
        get { return FindControl(ref _ownContactOwner, "ownContactOwner"); }
    }
    private Sage.Platform.Controls.IUserControl _usrAcctMgr;
    public  Sage.Platform.Controls.IUserControl usrAcctMgr
    {
        get { return FindControl(ref _usrAcctMgr, "usrAcctMgr"); }
    }
    private Sage.Platform.Controls.IPhoneControl _phnWorkPhone;
    public  Sage.Platform.Controls.IPhoneControl phnWorkPhone
    {
        get { return FindControl(ref _phnWorkPhone, "phnWorkPhone"); }
    }
    private Sage.Platform.Controls.IPhoneControl _phnFax;
    public  Sage.Platform.Controls.IPhoneControl phnFax
    {
        get { return FindControl(ref _phnFax, "phnFax"); }
    }
    private Sage.Platform.Controls.IPhoneControl _phnMobilePhone;
    public  Sage.Platform.Controls.IPhoneControl phnMobilePhone
    {
        get { return FindControl(ref _phnMobilePhone, "phnMobilePhone"); }
    }
    private Sage.Platform.Controls.IPhoneControl _phnHomePhone;
    public  Sage.Platform.Controls.IPhoneControl phnHomePhone
    {
        get { return FindControl(ref _phnHomePhone, "phnHomePhone"); }
    }
    private Sage.Platform.Controls.IPhoneControl _phnOtherPhone;
    public  Sage.Platform.Controls.IPhoneControl phnOtherPhone
    {
        get { return FindControl(ref _phnOtherPhone, "phnOtherPhone"); }
    }
    private Sage.Platform.Controls.IListBoxControl _cboPreferredContact;
    public  Sage.Platform.Controls.IListBoxControl cboPreferredContact
    {
        get { return FindControl(ref _cboPreferredContact, "cboPreferredContact"); }
    }
    private Sage.Platform.Controls.IEmailControl _emlEmailAddress;
    public  Sage.Platform.Controls.IEmailControl emlEmailAddress
    {
        get { return FindControl(ref _emlEmailAddress, "emlEmailAddress"); }
    }
    private Sage.Platform.Controls.IUrlControl _urlWebAddress;
    public  Sage.Platform.Controls.IUrlControl urlWebAddress
    {
        get { return FindControl(ref _urlWebAddress, "urlWebAddress"); }
    }
    private Sage.Platform.Controls.IPickListControl _pklContactType;
    public  Sage.Platform.Controls.IPickListControl pklContactType
    {
        get { return FindControl(ref _pklContactType, "pklContactType"); }
    }
    private Sage.Platform.Controls.ICheckBoxControl _chkIsPrimary;
    public  Sage.Platform.Controls.ICheckBoxControl chkIsPrimary
    {
        get { return FindControl(ref _chkIsPrimary, "chkIsPrimary"); }
    }
    private Sage.Platform.Controls.ICheckBoxControl _chkIsServiceAuthorized;
    public  Sage.Platform.Controls.ICheckBoxControl chkIsServiceAuthorized
    {
        get { return FindControl(ref _chkIsServiceAuthorized, "chkIsServiceAuthorized"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtInterest;
    public  Sage.Platform.Controls.ITextBoxControl txtInterest
    {
        get { return FindControl(ref _txtInterest, "txtInterest"); }
    }
    private Sage.Platform.Controls.ICheckBoxControl _chkDoNotSolicit;
    public  Sage.Platform.Controls.ICheckBoxControl chkDoNotSolicit
    {
        get { return FindControl(ref _chkDoNotSolicit, "chkDoNotSolicit"); }
    }
    private Sage.Platform.Controls.ICheckBoxControl _chkDoNotEmail;
    public  Sage.Platform.Controls.ICheckBoxControl chkDoNotEmail
    {
        get { return FindControl(ref _chkDoNotEmail, "chkDoNotEmail"); }
    }
    private Sage.Platform.Controls.ICheckBoxControl _chkDoNotPhone;
    public  Sage.Platform.Controls.ICheckBoxControl chkDoNotPhone
    {
        get { return FindControl(ref _chkDoNotPhone, "chkDoNotPhone"); }
    }
    private Sage.Platform.Controls.ICheckBoxControl _chkDoNotMail;
    public  Sage.Platform.Controls.ICheckBoxControl chkDoNotMail
    {
        get { return FindControl(ref _chkDoNotMail, "chkDoNotMail"); }
    }
    private Sage.Platform.Controls.ICheckBoxControl _chkDoNotFax;
    public  Sage.Platform.Controls.ICheckBoxControl chkDoNotFax
    {
        get { return FindControl(ref _chkDoNotFax, "chkDoNotFax"); }
    }
    private Sage.Platform.Controls.IPickListControl _pklContactStatus;
    public  Sage.Platform.Controls.IPickListControl pklContactStatus
    {
        get { return FindControl(ref _pklContactStatus, "pklContactStatus"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtPropensityScore;
    public  Sage.Platform.Controls.ITextBoxControl txtPropensityScore
    {
        get { return FindControl(ref _txtPropensityScore, "txtPropensityScore"); }
    }
    private Sage.Platform.Controls.IGroupNavigatorControl _cmdDetailsNavigator;
    public  Sage.Platform.Controls.IGroupNavigatorControl cmdDetailsNavigator
    {
        get { return FindControl(ref _cmdDetailsNavigator, "cmdDetailsNavigator"); }
    }
    private Sage.Platform.Controls.IButtonControl _cmdSaveContactDetails;
    public  Sage.Platform.Controls.IButtonControl cmdSaveContactDetails
    {
        get { return FindControl(ref _cmdSaveContactDetails, "cmdSaveContactDetails"); }
    }
    private Sage.Platform.Controls.IButtonControl _cmdReset;
    public  Sage.Platform.Controls.IButtonControl cmdReset
    {
        get { return FindControl(ref _cmdReset, "cmdReset"); }
    }
    private Sage.Platform.Controls.IButtonControl _cmdDelete;
    public  Sage.Platform.Controls.IButtonControl cmdDelete
    {
        get { return FindControl(ref _cmdDelete, "cmdDelete"); }
    }
    private Sage.Platform.Controls.ICopyControl _cmdCopyToClipboard;
    public  Sage.Platform.Controls.ICopyControl cmdCopyToClipboard
    {
        get { return FindControl(ref _cmdCopyToClipboard, "cmdCopyToClipboard"); }
    }
    private Sage.Platform.Controls.IButtonControl _cmdMoveContact;
    public  Sage.Platform.Controls.IButtonControl cmdMoveContact
    {
        get { return FindControl(ref _cmdMoveContact, "cmdMoveContact"); }
    }
    private Sage.Platform.Controls.IButtonControl _cmdCopyContact;
    public  Sage.Platform.Controls.IButtonControl cmdCopyContact
    {
        get { return FindControl(ref _cmdCopyContact, "cmdCopyContact"); }
    }

}

</script>
<script type="text/javascript">

function cmdMoveContact_ClientClick() {
var bindingManager = Sage.Services.getService('ClientBindingManagerService');
        if (bindingManager) {
            if (bindingManager._CurrentEntityIsDirty) {
                Sage.UI.Dialogs.alert(ContactDetailsResources['btnMoveContactError']);
                return false;
            }
        }
        return true;
}
function cmdCopyContact_ClientClick() {
var bindingManager = Sage.Services.getService('ClientBindingManagerService');
        if (bindingManager) {
            if (bindingManager._CurrentEntityIsDirty) {				
                Sage.UI.Dialogs.alert(ContactDetailsResources['btnCopyContactError']);
                return false;
            }
        }
        return true;
}</script>
